% TODO: use function parser like plotAllCols
function [data] = importFromArduino( folder, file, varargin )
%IMPORTFROMARDUINO Import data from a spreadsheet
%   [DATA] = IMPORTFROMARDUINO( FOLDER, FILE ) reads data from the first
%   worksheet in the Microsoft Excel spreadsheet file named FILE, in folder
%   named FOLDER and returns the data as column vectors.
%
%   Required inputs:
%
%   Optional inputs:
%   sheetName = the name of the sheet you want to read within the excel
%   startRow = first row of each block you want to import (see below)
%   endRow = last row of each block you want to import (see below)
%   startCol = first column of each block you want to import (see below)
%   endCol = last column of each block you want to import (see below)
%
%	Non-numeric cells are replaced with: NaN

% MATLAB nonsense that I haven't tested
%   [Sensor1,Sensor2,Sensor3,Sensor4] =
%   IMPORTFILE(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.

% Example:
%  T1BendUnfiltered = importFromArduino(folder, sprintf('T1_BendingOnTube_%scm.xlsx',sensLength),1,2,5000,'A','E');
%
%   See also XLSREAD.

% Base code Auto-generated by MATLAB on 2017/04/26 12:38:53

%% Input handling

% Function parser described here https://www.mathworks.com/help/matlab/matlab_prog/parse-function-inputs.html
% In brief: add[type](inputParser,name,check function)
trueFunction = @(x) true;
p = inputParser;
addRequired(p,'folder',@ischar)
addRequired(p,'file',@ischar)
addOptional(p,'sheetName',1,trueFunction)
addOptional(p,'startRow',1,@isnumeric)
addOptional(p,'endRow',10000,@isnumeric)
addOptional(p,'startCol','A',@ischar)
addOptional(p,'endCol','E',@ischar)

parse(p,folder, file, varargin{:})

%% Import the data, using inputs "folder" and "workbookFile"
fileName = strcat(folder,file);
[~, ~, raw] = xlsread(fileName, p.Results.sheetName, sprintf('%c%d:%c%d',...
    p.Results.startCol,p.Results.startRow(1),p.Results.endCol,p.Results.endRow(1)));
for block=2:length(p.Results.startRow)
    [~, ~, tmpRawBlock] = xlsread(file, p.Results.sheetName, sprintf('%c%d:%c%d',...
        p.Results.startCol,p.Results.startRow(block),p.Results.endCol,p.Results.endRow(block)));
    raw = [raw;tmpRawBlock]; %#ok<AGROW>
end
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
I = cellfun(@(x) ischar(x), raw);
raw(I) = {NaN};
data = reshape([raw{:}],size(raw));

%% Truncate so we get the proper number of rows
for ii = 1:size(data,1)
    if isnan(data(ii,1))
        data = data(1:ii-1,:);
        break
    end
end

return